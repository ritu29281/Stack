Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.
The car starting at 0 does not catch up to any other car, so it is a fleet by itself.
The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
Note that no other cars meet these fleets before the destination, so the answer is 3.
CODE:

class Solution {
    class Car{
        public:
        int pos,speed;
        Car(int p,int s){
            pos=p;
            speed=s;
        }
    };
    static bool mycomp(Car &a,Car &b){
        return a.pos<b.pos;
    }
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
       vector<Car>cars;
       for(int i=0;i<position.size();i++){
           Car car(position[i],speed[i]);
           cars.push_back(car);
       }
       sort(cars.begin(),cars.end(),mycomp);
       stack<float>st;
       for(auto car:cars){
           float time=(target-car.pos)/((float) car.speed);
           while(!st.empty() && time>=st.top()){
               st.pop();
           }
           st.push(time);
       }
       return st.size();
    }
};
